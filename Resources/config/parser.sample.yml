## Конфигурация парсера

#Описание источников данных
datasources:
  #Ключ используется в качестве имени источника данных
  ftp:  
    class: FTPDatasource  #Класс источника данных
    options:              #Опции источника данных. Набор опций зависит от класса
      host: ~
      username: ~
      password: ~    
  local:
    class: LocalDatasource
    
#Описание сущностей синхронизации. Обычно это таблицы БД, которые заполняются данными из выгрузки    
subjects:
  catalog:
    #Параметры парсера
    parser: 
      #Название класса парсера. Обязательно.
      class: SimpleXMLParser    
      #Опции парсера. Зависят от класса парсера.
      options:
        #Для SimpleXMLParser
        #Название тега, содержащего коллекцию сущностей (используется при генерации XML)
        rootName: catalog_list
        #Название тега сущности
        tagName: catalog
        #SimpleXMLParser поддерживает разбор дочерних субъектов. Например:
#        <catalog>
#          <products>
#            <product>...</product>
#            <product>...</product>
#          </products>
#       Чтобы включить автоматический разбор дочерних сущностей, необходимо для каждой дочерней сущности
#       добавить в блок children строку следующего вида: "%tagName%: %subject%", где %tagName% -
#       название тега, содержащего коллекцию дочерних сущностей, %subject% - название сущности (как указано в parser.yml)
        children:        
          products: product
    #Схема данных. Схема данных предоставляет информацию для создания временных таблиц и переноса данных    
    schema:        
      class: ~        #По умолчанию используется класс CommonSchema, загружающий параметры схемы из конфигурации
      options:
        tableName: remote_catalog     #Название основной таблицы. Обязательный.
        
        #Для схемы CommonSchema задает набор столбцов временной таблицы. 
        #Доступные параметры поля: 
        # * type - MySQL тип столбца
        # * size - Размер столбца
        # * mapWith - Указывает, какое поле основной таблицы соответствует данному.
        #             Если не указано, совпадает с именем солбца временной таблицы. 
        #             false - исключает столбец из переноса. 
        #             Строковое значение задает другое имя.
        columns: 
          guid:         { type: VARCHAR, size: 36 }
          parent_id:    { type: INTEGER, size: 11 }
          parent_guid:  { type: VARCHAR, size: 36 }
          title_native: { type: VARCHAR, size: 255, mapWith: title }
          
    entity: 
      #Класс сущности. Обязательное.      
      class: RemoteCatalogXMLEntity
    #Обработчик вставки во временную таблицу  
    insert:
      class: ~
    #Обработчик переноса вданных из временной таблицы в основную. Позволяет переопределить действия preTransfer и postTransfer  
    transfer:
      class: RemoteCatalogTransferHandler
      #Опции переноса 
      # всегда доступны следующие опции:
      # * key - поле, которое используется для сопоставления записей из временной и основной таблиц
      options:
        key: guid
    #Значения по умолчанию  
    defaults:
      datasource: local         #Имя источника данных, используемого по умолчанию
      #Можно задать строкой
      #filename: D:/test/catalog.xml #Путь к файлу данных по умолчанию
      filename: 
        incoming: /incmoing/catalog.xml
        outgoing: /outgoing/catalog.xml
      
#Описание сценариев синхронизации. Сценарий представляет собой список сущностей, 
#синхронизируемых последовательно
scenarios:
  #Название сценария
  all:
    #Список сущностей, которые подлежат синхронизации
    subjects:
      catalog: ~
      products: ~
    